// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: proto/benchmark.proto

package pb

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message_Corpus int32

const (
	Message_UNIVERSAL Message_Corpus = 0
	Message_WEB       Message_Corpus = 1
	Message_IMAGES    Message_Corpus = 2
	Message_LOCAL     Message_Corpus = 3
	Message_NEWS      Message_Corpus = 4
	Message_PRODUCTS  Message_Corpus = 5
	Message_VIDEO     Message_Corpus = 6
)

var Message_Corpus_name = map[int32]string{
	0: "UNIVERSAL",
	1: "WEB",
	2: "IMAGES",
	3: "LOCAL",
	4: "NEWS",
	5: "PRODUCTS",
	6: "VIDEO",
}

var Message_Corpus_value = map[string]int32{
	"UNIVERSAL": 0,
	"WEB":       1,
	"IMAGES":    2,
	"LOCAL":     3,
	"NEWS":      4,
	"PRODUCTS":  5,
	"VIDEO":     6,
}

func (x Message_Corpus) String() string {
	return proto.EnumName(Message_Corpus_name, int32(x))
}

func (Message_Corpus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_362d3b3c7bde328a, []int{0, 0}
}

type Message struct {
	Query                string         `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	PageNumber           int32          `protobuf:"varint,2,opt,name=page_number,json=pageNumber,proto3" json:"page_number,omitempty"`
	ResultPerPage        int32          `protobuf:"varint,3,opt,name=result_per_page,json=resultPerPage,proto3" json:"result_per_page,omitempty"`
	Comment              []byte         `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	Corpus               Message_Corpus `protobuf:"varint,5,opt,name=corpus,proto3,enum=Message_Corpus" json:"corpus,omitempty"`
	XXX_NoUnkeyedLiteral struct{}       `json:"-"`
	XXX_unrecognized     []byte         `json:"-"`
	XXX_sizecache        int32          `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_362d3b3c7bde328a, []int{0}
}
func (m *Message) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Message.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return m.Size()
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *Message) GetPageNumber() int32 {
	if m != nil {
		return m.PageNumber
	}
	return 0
}

func (m *Message) GetResultPerPage() int32 {
	if m != nil {
		return m.ResultPerPage
	}
	return 0
}

func (m *Message) GetComment() []byte {
	if m != nil {
		return m.Comment
	}
	return nil
}

func (m *Message) GetCorpus() Message_Corpus {
	if m != nil {
		return m.Corpus
	}
	return Message_UNIVERSAL
}

func init() {
	proto.RegisterEnum("Message_Corpus", Message_Corpus_name, Message_Corpus_value)
	proto.RegisterType((*Message)(nil), "Message")
}

func init() { proto.RegisterFile("proto/benchmark.proto", fileDescriptor_362d3b3c7bde328a) }

var fileDescriptor_362d3b3c7bde328a = []byte{
	// 293 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x34, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x3b, 0x6d, 0x27, 0x6d, 0xaf, 0xad, 0x1d, 0x06, 0xc5, 0x59, 0xc5, 0xd0, 0x85, 0x66,
	0x95, 0x82, 0x2e, 0x5d, 0xf5, 0x27, 0x48, 0xa1, 0x4d, 0xc2, 0xc4, 0xb6, 0xd0, 0x4d, 0x48, 0xc2,
	0x50, 0x41, 0xf3, 0xe3, 0x24, 0x59, 0xf8, 0x04, 0xbe, 0x82, 0x8f, 0xe4, 0xd2, 0x47, 0x90, 0xf8,
	0x22, 0x92, 0xa4, 0x2e, 0xbf, 0xef, 0x1c, 0x2e, 0x97, 0x03, 0x97, 0xa9, 0x4c, 0xf2, 0x64, 0x1a,
	0x88, 0x38, 0x7c, 0x8e, 0x7c, 0xf9, 0x62, 0xd4, 0x3c, 0xf9, 0x68, 0x43, 0x6f, 0x23, 0xb2, 0xcc,
	0x3f, 0x0a, 0x7a, 0x01, 0xf8, 0xad, 0x10, 0xf2, 0x9d, 0x21, 0x0d, 0xe9, 0x03, 0xde, 0x00, 0xbd,
	0x86, 0xb3, 0xd4, 0x3f, 0x0a, 0x2f, 0x2e, 0xa2, 0x40, 0x48, 0xd6, 0xd6, 0x90, 0x8e, 0x39, 0x54,
	0xca, 0xaa, 0x0d, 0xbd, 0x81, 0xb1, 0x14, 0x59, 0xf1, 0x9a, 0x7b, 0xa9, 0x90, 0x5e, 0x15, 0xb0,
	0x4e, 0x5d, 0x1a, 0x35, 0xda, 0x11, 0xd2, 0xa9, 0xce, 0x33, 0xe8, 0x85, 0x49, 0x14, 0x89, 0x38,
	0x67, 0x5d, 0x0d, 0xe9, 0x43, 0xfe, 0x8f, 0xf4, 0x16, 0x94, 0x30, 0x91, 0x69, 0x91, 0x31, 0xac,
	0x21, 0xfd, 0xfc, 0x6e, 0x6c, 0x9c, 0x5e, 0x32, 0x16, 0xb5, 0xe6, 0xa7, 0x78, 0x72, 0x00, 0xa5,
	0x31, 0x74, 0x04, 0x83, 0xad, 0xb5, 0xda, 0x99, 0xdc, 0x9d, 0xad, 0x49, 0x8b, 0xf6, 0xa0, 0xb3,
	0x37, 0xe7, 0x04, 0x51, 0x00, 0x65, 0xb5, 0x99, 0x3d, 0x9a, 0x2e, 0x69, 0xd3, 0x01, 0xe0, 0xb5,
	0xbd, 0x98, 0xad, 0x49, 0x87, 0xf6, 0xa1, 0x6b, 0x99, 0x7b, 0x97, 0x74, 0xe9, 0x10, 0xfa, 0x0e,
	0xb7, 0x97, 0xdb, 0xc5, 0x93, 0x4b, 0x70, 0x55, 0xd9, 0xad, 0x96, 0xa6, 0x4d, 0x94, 0xf9, 0xd5,
	0x57, 0xa9, 0xa2, 0xef, 0x52, 0x45, 0x3f, 0xa5, 0x8a, 0x3e, 0x7f, 0xd5, 0xd6, 0x01, 0x1b, 0xd3,
	0x87, 0x34, 0x08, 0x94, 0x7a, 0xa9, 0xfb, 0xbf, 0x00, 0x00, 0x00, 0xff, 0xff, 0x0c, 0x39, 0x86,
	0x5c, 0x42, 0x01, 0x00, 0x00,
}

func (m *Message) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Message) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Message) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Corpus != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.Corpus))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Comment) > 0 {
		i -= len(m.Comment)
		copy(dAtA[i:], m.Comment)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Comment)))
		i--
		dAtA[i] = 0x22
	}
	if m.ResultPerPage != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.ResultPerPage))
		i--
		dAtA[i] = 0x18
	}
	if m.PageNumber != 0 {
		i = encodeVarintBenchmark(dAtA, i, uint64(m.PageNumber))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintBenchmark(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintBenchmark(dAtA []byte, offset int, v uint64) int {
	offset -= sovBenchmark(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Message) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	if m.PageNumber != 0 {
		n += 1 + sovBenchmark(uint64(m.PageNumber))
	}
	if m.ResultPerPage != 0 {
		n += 1 + sovBenchmark(uint64(m.ResultPerPage))
	}
	l = len(m.Comment)
	if l > 0 {
		n += 1 + l + sovBenchmark(uint64(l))
	}
	if m.Corpus != 0 {
		n += 1 + sovBenchmark(uint64(m.Corpus))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovBenchmark(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozBenchmark(x uint64) (n int) {
	return sovBenchmark(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Message) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Message: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Message: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field PageNumber", wireType)
			}
			m.PageNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.PageNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ResultPerPage", wireType)
			}
			m.ResultPerPage = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ResultPerPage |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Comment", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthBenchmark
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthBenchmark
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Comment = append(m.Comment[:0], dAtA[iNdEx:postIndex]...)
			if m.Comment == nil {
				m.Comment = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Corpus", wireType)
			}
			m.Corpus = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Corpus |= Message_Corpus(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipBenchmark(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthBenchmark
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipBenchmark(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowBenchmark
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowBenchmark
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthBenchmark
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupBenchmark
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthBenchmark
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthBenchmark        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowBenchmark          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupBenchmark = fmt.Errorf("proto: unexpected end of group")
)
